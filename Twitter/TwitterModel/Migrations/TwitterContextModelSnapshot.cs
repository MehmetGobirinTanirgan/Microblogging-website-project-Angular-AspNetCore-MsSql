// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using System;
using TwitterDB.Context;

namespace TwitterDB.Migrations
{
    [DbContext(typeof(TwitterContext))]
    partial class TwitterContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TwitterModel.Models.Admin", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("TwitterModel.Models.Agenda", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AgendaDetail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Agendas");
                });

            modelBuilder.Entity("TwitterModel.Models.Follow", b =>
                {
                    b.Property<Guid>("FollowerUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FollowingUserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FollowerUserID", "FollowingUserID");

                    b.HasIndex("FollowingUserID");

                    b.ToTable("Follows");
                });

            modelBuilder.Entity("TwitterModel.Models.HashTag", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AgendaID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HashTagDetail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TweetCounter")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AgendaID");

                    b.ToTable("HashTags");
                });

            modelBuilder.Entity("TwitterModel.Models.Like", b =>
                {
                    b.Property<Guid>("TweetID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TweetID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("TwitterModel.Models.Topic", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TopicCategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TopicDetail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("TopicCategoryID");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("TwitterModel.Models.TopicCategory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("TopicCategories");
                });

            modelBuilder.Entity("TwitterModel.Models.Tweet", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LikeCounter")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReplyCounter")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReplyMainTweetID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReplyStatus")
                        .HasColumnType("int");

                    b.Property<int>("RetweetCounter")
                        .HasColumnType("int");

                    b.Property<Guid?>("RetweetMainTweetID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TopicID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TweetDetail")
                        .HasMaxLength(280)
                        .HasColumnType("nvarchar(280)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ReplyMainTweetID");

                    b.HasIndex("RetweetMainTweetID");

                    b.HasIndex("TopicID");

                    b.HasIndex("UserID");

                    b.ToTable("Tweets");
                });

            modelBuilder.Entity("TwitterModel.Models.TweetHashTag", b =>
                {
                    b.Property<Guid>("TweetID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HashTagID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TweetID", "HashTagID");

                    b.HasIndex("HashTagID");

                    b.ToTable("TweetsAndHashTags");
                });

            modelBuilder.Entity("TwitterModel.Models.TweetImage", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("TweetID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("TweetID");

                    b.ToTable("TweetImages");
                });

            modelBuilder.Entity("TwitterModel.Models.TweetMention", b =>
                {
                    b.Property<Guid>("TweetID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MentionedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TweetID", "MentionedUserID");

                    b.ToTable("TweetsAndMentions");
                });

            modelBuilder.Entity("TwitterModel.Models.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BackgroundPath")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("FollowerCounter")
                        .HasColumnType("int");

                    b.Property<int>("FollowingCounter")
                        .HasColumnType("int");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PersonalInfo")
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<string>("PersonalWebSiteURL")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProfilePicPath")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TwitterModel.Models.Follow", b =>
                {
                    b.HasOne("TwitterModel.Models.User", "FollowerUser")
                        .WithMany("Followings")
                        .HasForeignKey("FollowerUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TwitterModel.Models.User", "FollowingUser")
                        .WithMany("Followers")
                        .HasForeignKey("FollowingUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FollowerUser");

                    b.Navigation("FollowingUser");
                });

            modelBuilder.Entity("TwitterModel.Models.HashTag", b =>
                {
                    b.HasOne("TwitterModel.Models.Agenda", "Agenda")
                        .WithMany("HashTags")
                        .HasForeignKey("AgendaID");

                    b.Navigation("Agenda");
                });

            modelBuilder.Entity("TwitterModel.Models.Like", b =>
                {
                    b.HasOne("TwitterModel.Models.Tweet", "Tweet")
                        .WithMany("UsersWhoLiked")
                        .HasForeignKey("TweetID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TwitterModel.Models.User", "User")
                        .WithMany("LikedTweets")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tweet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TwitterModel.Models.Topic", b =>
                {
                    b.HasOne("TwitterModel.Models.TopicCategory", "TopicCategory")
                        .WithMany("Topics")
                        .HasForeignKey("TopicCategoryID");

                    b.Navigation("TopicCategory");
                });

            modelBuilder.Entity("TwitterModel.Models.Tweet", b =>
                {
                    b.HasOne("TwitterModel.Models.Tweet", "ReplyMainTweet")
                        .WithMany("ReplyTweets")
                        .HasForeignKey("ReplyMainTweetID");

                    b.HasOne("TwitterModel.Models.Tweet", "RetweetMainTweet")
                        .WithMany("Retweets")
                        .HasForeignKey("RetweetMainTweetID");

                    b.HasOne("TwitterModel.Models.Topic", "Topic")
                        .WithMany("Tweets")
                        .HasForeignKey("TopicID");

                    b.HasOne("TwitterModel.Models.User", "User")
                        .WithMany("Tweets")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplyMainTweet");

                    b.Navigation("RetweetMainTweet");

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TwitterModel.Models.TweetHashTag", b =>
                {
                    b.HasOne("TwitterModel.Models.HashTag", "HashTag")
                        .WithMany("TweetsOfHashtag")
                        .HasForeignKey("HashTagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwitterModel.Models.Tweet", "Tweet")
                        .WithMany("HashtagsOfTweet")
                        .HasForeignKey("TweetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HashTag");

                    b.Navigation("Tweet");
                });

            modelBuilder.Entity("TwitterModel.Models.TweetImage", b =>
                {
                    b.HasOne("TwitterModel.Models.Tweet", "Tweet")
                        .WithMany("ImagesOfTweet")
                        .HasForeignKey("TweetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tweet");
                });

            modelBuilder.Entity("TwitterModel.Models.TweetMention", b =>
                {
                    b.HasOne("TwitterModel.Models.Tweet", "Tweet")
                        .WithMany("Mentions")
                        .HasForeignKey("TweetID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TwitterModel.Models.User", "MentionedUser")
                        .WithMany("MentionedTweets")
                        .HasForeignKey("TweetID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MentionedUser");

                    b.Navigation("Tweet");
                });

            modelBuilder.Entity("TwitterModel.Models.Agenda", b =>
                {
                    b.Navigation("HashTags");
                });

            modelBuilder.Entity("TwitterModel.Models.HashTag", b =>
                {
                    b.Navigation("TweetsOfHashtag");
                });

            modelBuilder.Entity("TwitterModel.Models.Topic", b =>
                {
                    b.Navigation("Tweets");
                });

            modelBuilder.Entity("TwitterModel.Models.TopicCategory", b =>
                {
                    b.Navigation("Topics");
                });

            modelBuilder.Entity("TwitterModel.Models.Tweet", b =>
                {
                    b.Navigation("HashtagsOfTweet");

                    b.Navigation("ImagesOfTweet");

                    b.Navigation("Mentions");

                    b.Navigation("ReplyTweets");

                    b.Navigation("Retweets");

                    b.Navigation("UsersWhoLiked");
                });

            modelBuilder.Entity("TwitterModel.Models.User", b =>
                {
                    b.Navigation("Followers");

                    b.Navigation("Followings");

                    b.Navigation("LikedTweets");

                    b.Navigation("MentionedTweets");

                    b.Navigation("Tweets");
                });
#pragma warning restore 612, 618
        }
    }
}
